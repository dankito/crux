I think I've invested some time for both frameworks. I really like both because they bring the Swing-alike coding to web development. And I don't know easier ones for me (although there is click but I don't like the velocity templating thing) I wont have to worry much about the look and feel.It comes with nice themes true, but every serious company will style its app differently (unless you are prototyping) I will do all my programming in java which am very good at and wont have to spend time hacking css which am not very good at i will loose the ability to create UI declaratively. What are the advantages of that? (BTW: you could code declarative in groovy ;-)) But ok. I know what you mean: if you can effort a separate designers than wicket is 'better'. Why not? Or what do you mean here? Wicket supports ajax and there are components which supports nice 'desktop-alike' things (ajaxlink, lazycomponent, autocompletion, progressbar, see wicket stuff + extensions). ok, for any more complex component you'll have to code in javascript BUT BTW did you know that you could even use GWT within wicket Vaadin is surely faster while coding (no css, html stuff). But if you go production keep in mind that the ease of programming can come to the cost of performance on the client side: e.g. if you use the 'wrong' layouts such as Horizontal/VerticalLayout, ... the massive use of javascript could slow down old browser. But Vaadin is not slow! Use appropriate layouts such as CssLayout or FastLayout and also old browser can serve it. (Although if you would use CssLayout your coding-style is really wicket-alike.) One issue with Vaadin is that it is a bit harder to profile, because you don't see easily where the client needs all the CPU and the nested divs gets cryptic id-names. One great thing about Wicket is its warp persist integration Testing the UI should be easy with Vaadin (although I didn't found unit testing stuff) and is very easy with wicket. Last but not least creating lists/tables is VERY easy in Vaadin compared to wicket.